>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> try:
...     bg.integer_validator("myValue", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] myValue must be greater than 0
>>> try:
...     bg.integer_validator("val1", -24)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] val1 must be greater than 0
>>> try:
...     bg.integer_validator("val0", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] val0 must be an integer
>>> try:
...	bg.integer_validator("val", "something")
... except Exception as e:
...	print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] val must be an integer
>>> try:
...     bg.integer_validator("val2", [1])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] val2 must be an integer
>>> try:
...     bg.integer_validator("val3", (1, 2))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] val3 must be an integer
>>> try:
...     bg.integer_validator("val4", {1: "test1", 2: "test2"})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] val4 must be an integer
>>> try:
...     bg.integer_validator("val5", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] val5 must be an integer
>>> bg.integer_validator("val6", (4))
>>> try:
...     bg.integer_validator("val7", 10.6)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] val7 must be an integer
>>> try:
...     bg.integer_validator("val9", -5.0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] val9 must be an integer
>>> try:
...     bg.integer_validator("val8", {1, 2})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] val8 must be an integer
>>> try:
...     bg.integer_validator("val10")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] Geometry.integer_validator() missing 1 required positional argument: 'value'
